import {build} from 'esbuild';
import {join, dirname} from 'path';
import fs from 'fs/promises';
import crypto from 'crypto';
import {generateManifest, organizeChunks} from "./generateManifest.js";

function generateHash(content, length = 8) {
    return crypto.createHash('md5').update(content).digest('hex').slice(0, length);
}

const viteStyleNamingPlugin = {
    name: 'vite-style-naming',
    setup(build) {
        // Handle manual chunks similar to Vite's manualChunks
        build.onResolve({filter: /.*/}, (args) => {
            if (args.path.includes('node_modules')) {
                return {
                    path: args.path,
                    namespace: 'vendor'
                };
            }
            if (args.path.includes('src/components')) {
                return {
                    path: args.path,
                    namespace: 'shared'
                };
            }
            return null;
        });

        // Handle asset file naming
        build.onLoad({filter: /\.(png|jpe?g|gif|svg|webp|avif|mp4|webm|ogg|mp3|wav|flac|aac|woff2?|eot|ttf|otf)$/}, async (args) => {
            const content = await fs.readFile(args.path);
            const ext = extname(args.path);
            const name = basename(args.path, ext);
            const hash = generateHash(content);

            let assetType = 'assets';
            if (/\.(mp4|webm|ogg|mp3|wav|flac|aac)$/i.test(args.path)) {
                assetType = 'media';
            } else if (/\.(png|jpe?g|gif|svg|webp|avif)$/i.test(args.path)) {
                assetType = 'images';
            } else if (/\.(woff2?|eot|ttf|otf)$/i.test(args.path)) {
                assetType = 'fonts';
            }

            // Create asset directory
            const assetDir = `dist/client/assets/${assetType}`;
            await fs.mkdir(assetDir, {recursive: true});

            // Copy asset with hashed name
            const hashedName = `${name}-${hash}${ext}`;
            await fs.writeFile(join(assetDir, hashedName), content);

            return {
                contents: `export default "/assets/${assetType}/${hashedName}"`,
                loader: 'js'
            };
        });
    }
};


async function buildPages() {
    const pages = ['./playground/src/Home.jsx', './playground/src/About.jsx'];

   let buildResult = await build({
        entryPoints: pages,
        bundle: true,
        outdir: 'dist/client/assets',
        format: 'esm',
        minify: false,
        splitting: true,
        jsx: 'automatic',
        metafile: true,
        chunkNames: '[name]-[hash]',
        external: [],
        define: {
            'process.env.NODE_ENV': '"production"'
        },
        plugins: [viteStyleNamingPlugin],
        entryNames: '[name]-[hash]',
        banner: {
            js: '// Generated by esbuild with Vite-style naming'
        }
    });

    await organizeChunks(buildResult.metafile);
    await generateManifest(buildResult.metafile, buildResult);
    // console.log(m)

}


async function main() {
    try {
        // Clean dist directory
        await fs.rm('dist', {recursive: true, force: true});
        await fs.mkdir('dist/client/assets', {recursive: true});

        await buildPages();

        console.log('âœ… Build completed successfully!');
        console.log('Generated files:');
        console.log('- dist/client/assets/vendor.js (React + dependencies)');
        console.log('- dist/client/assets/home.js (Home component)');
        console.log('- dist/client/assets/about.js (About component)');

    } catch (error) {
        console.error('Build failed:', error);
    }
}

main().catch(console.error);