import React, { createContext, useContext, useEffect } from 'react';

const HeadStore = {
    appLevel: {
        title: '',
        meta: new Map(),
        links: new Map(),
        scripts: new Map(),
        style: new Map()
    },
    pageLevel: {
        title: '',
        meta: new Map(),
        links: new Map(),
        scripts: new Map(),
        style: new Map()
    },

    clearPageLevel() {
        this.pageLevel = {
            title: '',
            meta: new Map(),
            links: new Map(),
            scripts: new Map(),
            style: new Map()
        };
    },

    addTag(level, type, key, attributes, content = '') {
        if (!this[level] || !this[level][type]) return;

        if (type === 'title') {
            this[level].title = content;
        } else {
            this[level][type].set(key, { attributes, content });
        }
    },

    getAllTags() {
        const result = {
            title: this.pageLevel.title || this.appLevel.title,
            meta: new Map([...this.appLevel.meta, ...this.pageLevel.meta]),
            links: new Map([...this.appLevel.links, ...this.pageLevel.links]),
            scripts: new Map([...this.appLevel.scripts, ...this.pageLevel.scripts]),
            style: new Map([...this.appLevel.style, ...this.pageLevel.style])
        };

        return result;
    },

    generateHTML() {
        const tags = this.getAllTags();
        let html = '';

        if (tags.title) {
            html += `<title>${tags.title}</title>\n`;
        }

        tags.meta.forEach(({ attributes }) => {
            const attrs = Object.entries(attributes)
                .map(([key, value]) => `${key}="${value}"`)
                .join(' ');
            html += `<meta ${attrs}>\n`;
        });

        tags.links.forEach(({ attributes }) => {
            const attrs = Object.entries(attributes)
                .map(([key, value]) => `${key}="${value}"`)
                .join(' ');
            html += `<link ${attrs}>\n`;
        });

        tags.style.forEach(({ content }) => {
            html += `<style>\n${content}\n</style>\n`;
        });

        tags.scripts.forEach(({ attributes, content }) => {
            const attrs = Object.entries(attributes || {})
                .map(([key, value]) => `${key}="${value}"`)
                .join(' ');

            if (content) {
                html += `<script ${attrs}>\n${content}\n</script>\n`;
            } else {
                html += `<script ${attrs}></script>\n`;
            }
        });

        return html;
    }
};

async function getComponentInfo() {
    const path = await import('path');
    const fileName = path.basename(__filename, '.js');
    console.log(fileName)

}

const HeadContext = createContext({ level: 'pageLevel' });

const Head = ({ children, level = 'pageLevel' }) => {
    // useEffect(() => {
    //     return () => {
    //         if (level === 'pageLevel') {
    //             HeadStore.clearPageLevel();
    //         }
    //     };
    // }, [level]);

    const componentSource = getComponentInfo();


    const processChildren = (children) => {
        React.Children.forEach(children, (child) => {
            if (!React.isValidElement(child)) return;

            const { type, props } = child;
            const tagName = typeof type === 'string' ? type : type.displayName || type.name;

            switch (tagName?.toLowerCase()) {
                case 'title':
                    HeadStore.addTag(level, 'title', 'title', {}, props.children);
                    break;

                case 'meta':
                    const metaKey = props.name || props.property || props.charset || props.httpEquiv || 'unnamed';
                    HeadStore.addTag(level, 'meta', metaKey, props);
                    break;

                case 'link':
                    const linkKey = `${props.rel}-${props.href || props.as || Date.now()}`;
                    HeadStore.addTag(level, 'links', linkKey, props);
                    break;

                case 'script':
                    const scriptKey = props.src || `inline-${Date.now()}`;
                    const scriptContent = typeof props.children === 'string' ? props.children :
                        typeof props.children === 'function' ? props.children.toString() : '';
                    HeadStore.addTag(level, 'scripts', scriptKey,
                        { ...props, children: undefined }, scriptContent);
                    break;

                case 'style':
                    const styleKey = `style-${Date.now()}`;
                    const styleContent = typeof props.children === 'string' ? props.children : '';
                    HeadStore.addTag(level, 'style', styleKey, props, styleContent);
                    break;

                default:
                    if (props.children) {
                        processChildren(props.children);
                    }
            }
        });
    };

    if (children) {
        processChildren(children);

    }

    useEffect(() => {
        if (typeof window !== 'undefined') {
            updateDocumentHead();
        }
    });

    return null;
};

const updateDocumentHead = () => {
    if (typeof window === 'undefined') return;

    const tags = HeadStore.getAllTags();

    if (tags.title) {
        document.title = tags.title;
    }

    const existingTags = document.querySelectorAll('[data-head="true"]');
    existingTags.forEach(tag => tag.remove());

    tags.meta.forEach(({ attributes }) => {
        const meta = document.createElement('meta');
        Object.entries(attributes).forEach(([key, value]) => {
            meta.setAttribute(key, value.toString());
        });
        meta.setAttribute('data-head', 'true');
        document.head.appendChild(meta);
    });

    tags.links.forEach(({ attributes }) => {
        const link = document.createElement('link');
        Object.entries(attributes).forEach(([key, value]) => {
            link.setAttribute(key, value.toString());
        });
        link.setAttribute('data-head', 'true');
        document.head.appendChild(link);
    });

    tags.style.forEach(({ content }) => {
        const style = document.createElement('style');
        style.textContent = content;
        style.setAttribute('data-head', 'true');
        document.head.appendChild(style);
    });

    tags.scripts.forEach(({ attributes, content }) => {
        const script = document.createElement('script');
        if (attributes) {
            Object.entries(attributes).forEach(([key, value]) => {
                if (key !== 'children') {
                    script.setAttribute(key, value.toString());
                }
            });
        }
        if (content) {
            script.textContent = content;
        }
        script.setAttribute('data-head', 'true');
        document.head.appendChild(script);
    });
};

export { HeadStore };
export default Head;