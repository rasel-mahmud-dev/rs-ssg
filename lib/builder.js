import path from 'path'
import fs from "fs-extra";
import {build} from 'esbuild';
import RenderPage from "./renderPage.js";

import {generateManifest, getManifest} from "../generateManifest.js";

import viteStyleNamingPlugin from "./viteStyleNamingPlugin.js";
import tailwindPlugin from "esbuild-plugin-tailwindcss";


class Builder {

    constructor(config) {
        this.config = config
        this.renderPage = new RenderPage(config)
    }

    async build(routes) {
        const {buildDir} = this.config
        console.log('üöÄ Building static site...')
        // await fs.remove(path.join(root, 'dist'))

        console.log('üì¶ Building SSR bundle...')

        if (!routes || routes.length === 0) {
            throw new Error('‚ùå No routes found! Please define routes in src/routes.jsx')
        }

        const pages = routes?.map((route) => {
            return "playground" + route.entry
        })
        // const configFile = await collectViteConfig('production', this.config);

        await fs.remove(path.resolve(buildDir))

        let buildResult = await build({
            entryPoints: pages,
            bundle: true,
            outdir: 'dist/assets',
            format: 'esm',
            minify: false,
            splitting: true,
            jsx: 'automatic',
            metafile: true,
            chunkNames: '[name]-[hash]',
            external: [],
            define: {
                'process.env.NODE_ENV': '"production"'
            },
            plugins: [
                viteStyleNamingPlugin,
                tailwindPlugin({})
            ],
            entryNames: '[name]-[hash]',
            banner: {
                js: '// Generated by esbuild with Vite-style naming'
            }
        });

        let buildResult3 = await build({
            entryPoints: ["./playground/src/client.jsx"],
            bundle: true,
            outdir: 'dist/assets',
            format: 'esm',
            minify: false,
            splitting: true,
            jsx: 'automatic',
            metafile: true,
            chunkNames: '[name]-[hash]',
            external: [],
            define: {
                'process.env.NODE_ENV': '"production"'
            },
            plugins: [
                viteStyleNamingPlugin,
                tailwindPlugin({})
            ],
            entryNames: '[name]-[hash]',
            banner: {
                js: '// Generated by esbuild with Vite-style naming'
            }
        });


        const client = await getManifest(buildResult3.metafile, buildResult3)
        const clientjs = Object.values(client)[0]?.file
        const globalCss = client["client.css"]?.file

        await generateManifest(buildResult.metafile, buildResult);

        // Generate static pages
        await this.renderPage.generateStaticPages(routes, {
            scripts: clientjs ? [clientjs] : [],
            styles: globalCss ? [globalCss] : [],
        })

        // Copy client assets to dist
        // const clientAssetsDir = path.resolve(process.cwd(), `${buildDir}/client/`)
        // const distAssetsDir = path.resolve(process.cwd(), `${buildDir}/`)
        //
        // if (await fs.pathExists(clientAssetsDir)) {
        //     await fs.remove(path.resolve(process.cwd(), `${buildDir}/client/index.html`))
        //     await fs.ensureDir(distAssetsDir)
        //     await fs.copy(clientAssetsDir, distAssetsDir)
        //     console.log(`üìÑ Client JS/CSS assets copied to ${buildDir}/`)
        // }
        //
        // const publicDir = path.resolve(process.cwd(), 'public')
        // if (await fs.pathExists(publicDir)) {
        //     await fs.copy(publicDir, path.resolve(process.cwd(), buildDir))
        // }
        // //
        // await fs.remove(path.resolve(process.cwd(), `${buildDir}/.vite`))
        // await fs.remove(path.resolve(this.config.frameworkPath, `dist`))
        //
        // // generate robots.txt
        //
        // console.log('‚úÖ Static site built successfully!')
        // console.log(`üìÅ Output: ${buildDir}/`)
    }

}

export default Builder